2025.01.17

** 수업내용
> 웹브라우저는 대표적으로 3개의 언어 및 스타일 시트만을 인식해왔었음
++추가로 JS를 인식하게 됨
이 3가지가 가장 기본적인 언어 체계이다.

기존 커리큘럼
HTML5: 마크업 언어
-제품 서비스를 만드는데 있어서 전체적인 구조를 세팅하는 역할에 그치는 언어

CSS3: 스타일 시트 (=> 언어가 아니다)
- 마크업언어의 스타일을 생성하고, 적용시켜주는 보조역할
- 사용자의 능동적인 소통을 할 수있는가? 불가 X

JS: "프로그래밍" 언어 (> *객체지향적 언어)
- 프로그램을 만들어 낼 수 있다 > 전제
- 최대한 인간친화적인 모델 형식 채택
- 명령을 내리면 값이 적용이 되고 그 뒤 그 값을 찾아와서 실행하게 된다
 > 인풋 => process => 아웃풋
- F/E (프론트/백) 가장 대표적인 언어이면서 // 기초적인 언어이다.

자바스크립트 본 수업

// 변수 = variable
// 변수 = 변할 수 있는 값 = 수
// 변수 = 바구니 / 값을 담을 수 있는 그룹

/* 선언 & 할당 => 단계
  선언 하는 방식 => 
  2015년 기준 var(*예약어) 라는 방법 1개 밖에 없었다.  (자주 쓰이지 않는다.)
  선언하는 방식이 최근에 와서는 => let || const 2가지가 늘었고
  총 3가지가 대표적이다.  // 
  모든 변수는 저마다 고유한 이름 => 변수명 || 식별자가 있다.

1. const = constant (상수라는 뜻)  <-> 변수 와 반대  = 고정값  <-> 변수값
// 상수는 재선언 과 재할당 이 불가하다. 
예시) const num = 1;
	const num = 2; 	> 이렇게 재선언이 불가하다. 
				중복을 방지하기 위해서 또는 다른값에 통합되어지는걸 방지하기 위해
				고정값이 있어야 한다.
또한, num = 2; 이렇게 상수값에 값을 재할당하는 것 또한 안된다.  (엄격하다.)

>> 변수를 선언하는 순간 => 컴퓨터는 데이터 (*변수값) => 메모리 영역 할애
=> 메모리가 담길 수 있는 방 생성  >  식별자 라고 한다. > 그럼 문서상 1개밖에 못만드는게 된다.

프로그래밍 언어는 엄격할수록 안정성이 뛰어나다 > 위험요소가 감소

2. let = 재선언은 불가 // 재할당이 가능하다.

3. var = 재선언 / 재할당 / 문자열 / 숫자열 다 수용이 가능해서 중첩되고 오류가 발생되어도
	    다 포용하기 때문에 혼란을 야기 거의 쓰이지 않는 단어이다.

호이스팅 (*Hoisting)
=> 무언가를 끌어올리다!!

// 변수안에 담을 수 있는 값 => "자료형"이라한다. > 크게 2가지로 나뉜다.

1. 원시타입 = primitive type
- number = 숫자
- string = 문자열
- boolean = 참,거짓 =논리형  
>> truthy한 값 사실적으로 근거 하는 값 // 긍정적인
>> Templete Literal 이라는 문법이 나타났다. (2015년 이후로)
    변수와 문자열을 동시에 사용하고자 할 때 굳이 번거롭게 연산자를 사용하지 않을 수 있도록
    만들어 놓은 문법이다. (반복적 연산자를 피하기 위한 문법)
    예시) `${userName} 배우가 출현한 최근 영화는` 이런식으로 쓰인다.
	백틱 기호로 묶어주고 해당 변수앞 ${} 로 묶어서 설정하고 문자열을 배치(""없이) 사용

- undefined = 미정 (시점상 값이 입력되어지지 않을때 또는 의도치 않은 오류가 났을때) 수동적
>> falsy한 값이다. // 부정적인 

- null = 유효하지 않은 값 (아예 의도적으로{"유효하지 않은"} 값을 주고 싶을 때, 
				      값을 주고 싶지않을걸 정의하고자 할 때) 주도적

- symbol = 상징적인, 유일무이한 값 // 단일값으로 여러/중복된 변수를 줘도 하나의 고유값을 갖는다.
		예시) 회원가입시 동명이인들 // 같은 회사, 주소 등을 기입할때 같은 값이더라도
			여러가입자가 입력했을 때 그사람의 고유값으로 인식이 되게끔 해준다.

2. 참조타입 = Reference type
- array = 배열* (> 배열의 뿌리는 객체이다.) >1개의 배열 A=[a, b, c]을 만들기 위해 안에 객체가 존재해야 한다.
		- 총 갯수의 -1 은 총 인덱스 갯수와 같다. 컴퓨터는 0에서 부터 시작하기 떄문에 0=index
		- A=[a, b, c] 총 3개의 길이지만 객체수는 0, 1, 2 순으로 간다.
		- `${arr[1]}은 arr배열의 ${arr.length - 1}번째 값입니다.` 이렇게 인덱스의 - 값을 주면 된다.

- object = 객체 ( { } 중괄호를 사용한다. ) > 배열 안에 각각의 숫자들이 가지고 있는 의미를 정의 할 수 있다.
								a = 가 , b = 나, c = 다 이렇게 만들 수 있다.
		tutor: "David"  > 객체의 형태는  Key: "Value" = 한 쌍의 property(속성)로 구성되어 있다.
									부품적으로 취급 하나의 조립식으로 구성되어 있다.
//html에서 사용할때는 
=> a href > attribute

- function = 함수 (기능) // Method는 '방법, 방식'
>> 객체에서 파생된 기능이다. 객체란 자료가 있어야 기능을 쓸수 가 있다.



위 의 3가지가 많이 쓰이는 기초 방식들이다.

- regexp = 정규표현식
- Map = 맵 데이터
- Set = 셋 데이터 // 반복적으로 들어오는 값을 배제할 수 있다.

자바스크립트의 중급자 실력을 갖추는데 있어서 요구조건 => iterable객체 & 반복문을 누가 더
자유자재로 사용가능한가? 에 대해서 나뉠것이다.
재사용과 재활용이 가능한 코드가 좋은 코드이다.

// * CSS의 세계
> 피그마 => fff // 000
컴퓨터가 사람이 입력한 데이터를 처리하는 방식 
2진법 (0, 1) 이라는 방식으로 데이터를 처리한다.
> 메모리 공간에 > 가장 최소단위
고사양의 데이터를 처리하려면 많은 비트를 사용하게 된다.
비효율적인 로딩이 걸리게 된다. 메모리 과부하!!
// 비트 > 바이트의 단위는 1비트가 8개 모인것
// 변수 선언 > 숫자형 타입 값을 할당 하는 순간 로컬 컴퓨터에 64비트의 값이 할당된다.
전통적인 프로그래밍 언어 굳이 비효율적으로 낭비될 수 있는 메모리 공간을 생성하지 않기
위해 java, c언어는 이터러블한 객체를 생성할 때 애초에 해당 객체에 얼만큼의 값을 넣을지 정의

1.굉장히 타이트하게 기본값을 설정해 놓고, 만약 그 타이트한 값을 초과해서 메모리 사용하고자
할때마다 값을 추가 시켜주거나
-> 그렇게 되면 하지 않아도 될일을 하면서 메모리가 더 차지하게 된다.

2.애초에 값을 굉장히 큰 범위로 만들어 놓고, 개발자가 어떤 범위, 용량의 값을 적용하더라도
문제가 없게 끔하거나
-> 비효율적으로 남아도는 공간이 생기게 된다. 내가 설정한 값보다!

===> 그래서 컴퓨터는 데이터를 효율적으로 관리하기 위해 약속을 했다.

전개 연산자 구문 = Spread Operator (리액트에 많이 나온다.)
배열이나 객체를 다른 배열이나 객체에 추가할 때 사용하는 연산자이다.

Js: 1개의 JS파일별로 독립적인 요소로 인식!!
   - 그래서 변수명이 같아도 상관이 없다.

Ts: 자바스크립트의 컴파일러 언어다. 웹에서 인식을 하지 않는다.
   -node라는 기반에서 컴파일을 이루고 있다. 변수명이 같게 되면 오류가 난다.

NaN = Not A Number 이라는 뜻이다.

3. 연산자 & 제어문!





