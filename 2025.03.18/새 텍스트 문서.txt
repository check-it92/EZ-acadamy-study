** 2025.03.18 수업내용

** 스타일 컴포넌트 수업

최근 들어 스타일 관련하여 여러가지 방법들이 있다. (스타일시트 = css)
최근 사용빈도 순으로 정렬한것!
**
1. sass(=scss) 
2. tailwind
3. styled-components

이런 식으로 우리가 선택해서 쓸 수있는 방법들이 많다.
그 중에서 오늘 우리가 하는건 3 번째 방식이고
이 방식의 장점은 스타일의 틀을 유지한채 우리가 여러번 재활용으로 쓸 수 있다는 것이고
그리고 안에 내용만 바꾸어서 쓸수도 있다는 점이다.
=> 스타일에 영향을 미치게 한다, => css가 처리할수 있게 한다.

**필수 확장프로그램으로 : vscode-styled-components 다운을 받아야 한다.

방식은 sass 처럼 package.json 에서 디펜더스에 띄우는 것처럼
1.npm i styled-components = 해당 양식을 설치한후 쓰면 된다.
2.npm i react-router-dom = 돔버전에서 쓰기 위해 같이 설치 (페이지로의 이동)
3.npm i styled-reset = 초기 스타일 리셋 버전 이것또한 같이 설치

폴더를 생성 (components/UI) 를 만든 후 그 안에 (명칭).jsx 을 만들어
해당 import로 갖다 쓰기만 하면 된다. (컴포넌트 방식) 
스타일도 정립하면서 동시에 컴포넌트 방식도 활용할수 있는데 이런식으로 
${({ height }) => height && `height: ${height}px`}; 정립해서 사용해야 한다.

 포트폴리오를 작성할때 이렇게 여러방법을 여러가지 착안해서
=>> 우리는 커스터마이징을 해야 해서 준비를 해야한다.

** 장/단점
sass = map-get, 등등의 요소의 장점 대신 props 사용불가! 하나하나 개인설정
styled-components = 공통요소 나 mixin은 사용불가이지만 props 사용가능 공통으로 요소추가!

** 리액트에서 동영상 파일을 저장할때
무조건 - !! "public" 라는 폴더에 저장해야 한다.

- 이미지 파일은 public, src 둘 다 상관없지만 그래도 공통적으로 사용하는게 좋다.

**주종관계로 묶이는 파일은 하나의 폴더에 모아서 저장하는게 좋다.

할때마다 페이지 분기를 만들수 없으니
우리는 Rest Full Pages 를 만들어 본게 라우트를 만들어 본것이다.
=> 이걸 싱글페이지 어플리케이셔 {SPA} 라 한다.

=> 우리는 이렇게 페이지가 많아지면 점점 용량이 많아질텐데
그럼 컴퓨터는 느려질테고 그럴때를 대비해서 우리는 vite를 쓴것이다.

< 훅 함수 >

**useNavigate =>
useNavigate는 React Router v6에서 새롭게 추가된 hook입니다.
 useNavigate를 사용하면 JavaScript 함수 내에서 다른 페이지로 이동할 수 있습니다. 
useNavigate는 주소 표시줄의 URL을 변경하지 않으며, 페이지 이동만 수행합니다.

=>> 페이지의 깜박거림 없이 한큐에 넘어가진다. 자연스럽게 이동가능
Why? 하나의 html 안에서 이동하는 것이기 때문에
 페이지를 굳이 생성할 필요x , 동적파라미터를 우리가 Id 값으로 부여했기 때문에
=> 예) 무신사가 이런 느낌



 <Route path="/post/:postId" element={<PostViewPage />} />
우리가 :postId 를 부여함으로써 그 값마다 가변적으로 변경해서 사용이 가능해진다.
(공통된경로는 가능하지만)

** useParams : useParams는 리액트에서 제공하는 Hook으로 동적으로 
			라우팅을 생성하기 위해 사용한다.

URL에 포함되어있는 Key, Value 형식의 객체를 반환해주는 역할을 한다. 
Route 부분에서 Key를 지정해주고, 해당하는 Key에 적합한 Value를 넣어 URL을 변경시키면, 
useParams를 통해 Key, Value 객체를 반환받아 확인할 수 있다. 
반환받은 Value를 통해 게시글을 불러오거나, 검색목록을 변경시키는 등
 다양한 기능으로 확장시켜 사용할 수 있다.



