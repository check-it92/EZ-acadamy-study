// 데이터 통신
/*
1) User(*사용자)

2) Client (*웹 브라우저)

3) Server (*서버)

요청 & 응답 => 프로세스가 상시 실행!!

request & response 요청과 응답이 정상적으로 잘 이루어지고 있는지? 확인가능!!
  http://www.해당사이트.com >> 사이트(도메인)에 들어가서 나(유저) 입력하는 것만으로도 서버에 데이터를 요청한 것!
  // Request Method: GET 방식으로 요청을 한것! (form안에 있는 input태그를 활용한것)
  2. POST 방식 => 사용자가 클라이언트를 통해서 어떤 값을 전달하고, 전달받은 해당 값을 기반으로
  서버에서 업데이트된 정보를 다시 사용자에게 전달하는 방식!!
  ex) 댓글창에 글을 입력하거나, 숏츠,릴스 등을 공유 전달 할때 쓰이는 원리

* 요청 및 응답 (헤더, 메세지)를 통해서 유추!!

**데이터 통신이 이루어지는 프로세스 및 원리
데이터 통신이 이루어지는 상황에서 클라이언트와 서버는 어떤 자료를 서로 주고 받을까?
>> xml 자료형식 (2015년 이전) // json (2015년 이후) 자료형식 이라는 데이터로 주고 받는다.
Javascript Object Notation => 자바스크립트 객체 표기법

*/
// 객체 방식으로 {} 괄호를 사용하여 key : value로 나열한것

const student = {
  name: "짱구",
  major: "컴퓨터 공학",
  grade: 2,
};

const json = JSON.stringify(student);

// stringify 키값을 문자열로 변환해주는 함수!

// 클라이언트 & 서버가 서로 통신을 하는데, json 데이터 자료를 주고, 받는다!! => 해당 자료를 아무런 변환작업없이 그대로 사용가능?
//NO!! 불가하다. 변환작업을 거쳐야 한다.

const json2 = JSON.parse(json);
// console.log(json2);
console.log(json2.grade, typeof json2.grade);

// 객체화 하기위해 다시 변환을 해주는 함수
// json 형태로 데이터의 자료형을 형변환하는 경우, 항상!!
// 데이터 자료타입을 체크하는 습관!!! 자동으로 형변환이 될수 있다.

// 클라이언트가 서버에게 데이터를 요구하고, 해당 데이터를 가져오는
// 방식은 어떻게 생겼으며, 어떻게 사용해야할까?

// 자바스크립트에서 서바와 데이터 통신을 할때 사용하는 방법 : AJAX
// Asynchronous : 비동기 처리 방식을 할 때 나옴
//Asynchronous Javascript And Xml : 통신방법

/*
AJAX 라는 데이터 통신 방법을 활용한 세부적인 통신기법
XMLHttpRequest => XHR 방식의 통신기법이라 한다.
?? 요즘 쓰나요? NO!! 쓰질 않지만 원조방식이다.
  **여러 중간과정이 번거롭다. 그래서 나온 것이!!

fetch() 방식이다.
*/