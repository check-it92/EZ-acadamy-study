2025.01.06 월요일
**수업내용**

주어진 시간을 최대한 활용해서 우리는 살아야 한다

1. 문자 선택자
2. 부정 선택자
3. 링크 선택자

*라이브러리 & 프레임워크
: 기존문법을 보다 쉽고 빠르게 사용할 수 있도록 하기 위해서 태어난 요소들!
의 차이점은? :
1. 라이브러리(*도서관) - 기존에 존재하는 언어의 문법 체계대로 그 위에 본인들의 
				  커스텀 문법을 얹힌 상태 (최소한의 언어사용이 필요+기초지식)
			          (공유문법) Ex) React.js

2. 프레임워크(*액자) - 완벽하게 본인들만의 문법체계를 구축해놓은 상황 > 본인들의 시스템 안에서
			해당 시스템을 개발자들이 별도록 학습요망 (고유문법)
			(우리들만의 공간에서 사용을 하겠다.) Ex) Bootstrap, Next.js,..등등
			해당 프레임 워크에서는 고유의 언어 체계들을 일일이 매번 입력하기 어려워서
			홈페이지에서 복사를 하여 사용하는 것이 좋다.

**코드 작성시 같은 계열의 태그들은 붙여서 작성하는 것이 구분하기 쉽고 수정하기 용이하다.

> F/E : 
- jQuery
1. cdn 에서 코드를 복사해서 소스코드 메타 네임 밑 스크립트를 복사하면 된다.
2. 로컬컴퓨터 자체 내에 다운 받아서 사용 해도 된다.
브라우저에서 다른이름으로 해당버전을 저장해서 사용하면 된다.

-React.js
-Next.js  >> 가장 추세인 프레임 워크 들
> 본인들만의 고유한 문법 체계
라이브러리 체제 에서 우리가 호환이 되지 않는 버전들이 존재한다.
(매번 업데이트가 되기 때문에) 그래서 적합한 버전을 다운받는게 좋다.
> 주석 // 회사 자체 내에 방식이 있기때문에 주석이 있는 것이 썩 달갑지는 않다.
	     개인 로컬 컴퓨터 작업시에는 주석을 덧붙여서 공유하는 것이 좋다.

> 라이브러리 사용 비중을 회사 입사시에는 비중이 증가하지만 // 개인적일때에는 적게 하는게 발전up


**제이쿼리를 가동할시**
자동으로 reset css 가 적용이 된다.
대신 접두어를 사용하여야 하는데  " data-"를 속성으로 줘야 한다.
예시) div data-role="header"


2. 링크 선택자 : a(앵커) 태그 안에 링크 여부에 따라서 스타일 속성을 부여해주는 선택자!!

3. 부정 선택자 : 개발자가 선택한 요소의 반대가 되는 요소들에게만 스타일 속성을 부여할 때
			사용할 수 있는 선택자

『
- 선택자 의 총 종류
 적재적소에 아래에 해당하는 선택자들을 잘 활용하는게 중요
-> { 전체, 태그, ID, class, 속성, 후손/자손, 동위, 반응, 상태, 일반/형태구조, 문자, 링크, 부정 } 

- 태그의 종류
-> { h/ p/ a/ img/ video/ audio/ table/ li/ form }

- Semantic														   
- 공간분할 태그 														』

이 전체 4가지가 html 에서 중요한 내용들이다.
------------------------------------------------------------------------------------------------------------
CSS 앞으로 배워야 할 개념들

*CSS 단위 / 속성
**단위
> px(픽셀) : 고정 단위 (화면에 따라 호환x) - 점점 빈도가 축소됨
- 다양해진 device(기기) { 핸드폰, 탭, 패드, 키오스크 ...등등 }
- 애초에 독립적인 device UI 구현 목적
- 16px (기본 베이스) - <h4> 단위값 동일
  웹에서 가져가는 기본 값이기 때문에 16px 로 시작을 하는게 좋다.
  그리고 짝수단위로 +-가져가는게 좋다. (홀수 비추)

> em : element 요소(=기본 16px 의 2배 차이)
- 부모요소를 기준으로 배수 계산
- 라벨 과 폼 요소는 쌍으로 움직이기 때문에 같이 줘도 좋지만
 다른 요소들은 하나마다 역산을 해야 하는 번거로움이 있기때문에 비추.

>** rem : root element (근본 요소)
- 최상위 부모요소를 기준으로 계산
- body 요소에 폰트사이즈 값을 적용하고 모든 요소들은 body를 기준으로 배수 계산
팀 프로젝트의 기본기 하나의 요소만 만지면 하위메뉴들이 같이 변경되기 때문
계산 법은 = { 16 나누기 해당픽셀값 } 2rem은 16/32 = 2rem


> % : font-size 에선 사용하지 않지만
- widty || height 정의하고자 할 때
- 가변그리드 : 반응형 페이지를 만들때 (test 용)으로 쓴다. (auto width)
 부모요소의 전체 너비가 변경될 때 해당 값에 비례해서 마진 혹은 패딩의 간격도 변경되게
 하고자 할 때 적용할 수 있는 단위

- 만약, 부모 혹은 자식요소 중에 height의 값이 적용된 적이 없다면, 그때는 height의 100%는
  자동으로 자식요소의 기본높이 값만큼을 의미한다.
if, => 자식요소 중에 height 값을 인위적으로 적용하게 된다면, height의 100%는 자식요소의 높이값을
적용한 높이 값만큼 변경된다.

- 부모요쇼의 높이값이 구체적으로 정해진 상황에서는 height의 값을 가변적으로 변경 후 적용!
#container {
        height: 200px; 높이 지정 (부모요소)
        main {
          width: 100%;
          height: 50%; 가변적으로 변경 (자식요소) > 200%의 50%는 =100% 이 것으로 변경

 >  vh(viewport height) - 현재 내가 내눈으로 볼 수 있는 공간에서의 총 높이 면적
     vw(viewport width) - 현재 내가 내눈으로 볼 수 있는 공간에서의 총 너비 면적
텍스트가 가지고 있는 본연의 마진값을 제외 한 (reset css 활용하면 더 적나라하게 보임)

> max-width // height || min-widht // height
- 부모요소의 너비값이 늘어나거나 || 줄어들때 같이 비례해서 늘어나거나 || 줄어들다가도
 (최소||최대한)의 너비값 이상으로 늘어나거나 || 줄어들게 되면 그때에는 더이상 같이 움직이지 않게 한다.
 그때에는 해당 기본텍스트 너비의 최대//최소값을 유지하겠다. 라는 의미
-why? 사용자의 UI의 불편함을 줄 수 있기때문에 설정을 하는 것 최소한의 편의 장치
(화면에 따라 텍스트가 커지고 좁아질 수 있는데 시야에 제한이 될 수 있다. 그걸 방지)

**속성 :
> 단위, 색상, 가시속성(display, visiblity)
display:
none: 특정 요소를 보이지 않도록 && 공간을 없애는 속성 해당 텍스트의 공간이 없어 진다. 화면상 안보이게 된다.

block: none이라는 속성의 반대의 의미를 가지고 있다. 해당 텍스트의 공간 할당을 하고 화면상 보이게 해준다.

inline: 해당 텍스트의 공간 할당을 하고 화면상 1줄로 보이게 해준다. (1개의 공간을 같이 쓴다.)
	***이 속성은 width 와 height 의 값을 받지 않는다. 1개의 행으로 구성되어 있기 때문에

inline block : 특정요소가 보여질 수 있도록 하는 속성 - 컨텐츠의 길이에 따라 가변적으로 사용가능
		--만약, 속성안에 담겨있는 요소들이 하나의 행을 벗어나는 경우에는 블럭 처럼 독립적으로 사용!
		--만약, 속성안에 담겨있는 요소들이 하나의 행 안에서 소화될 수 있는 경우에는 인라인 처럼 한 행을
		  공유해서 사용
	***이 속성은 width 와 height 의 값을 적용시킬수 있다.
{ inline vs inline block }
1. 너비와 높이 값을 적용 받을 수 있는가?
2. 마진, 패딩 값을 어디까지 적용받을 수 있는가? inline: 좌,우만 적용 // inline block: 상,하,좌,우 모두 적용가능

< But, 둘 다 적용가능한 공간들이 적절히 있기 때문에 굳이 하나만 고집할 필요 없다. >

visibility: 
   hidden: 해당 텍스트의 공간은 살아 있고 안에 내용물이 안보이게 된다. 화면상 빈칸처럼 보이게 된다.

>> 박스 속성
margin 0 , padding 0 box-sizing 로 구성하는게 reset css 기본구성이다.

- margin : 특정 요소 바깥 공간(*여백)을 얼만큼 부여할 것인가? 에 대한 스타일 속성 (상하좌우)

- padding : 특정 요소 내부 공간(*여백)을 얼만큼 부여할 것인가? 에 대한 스타일 속성 (상하좌우)

- box-sizing :
border-box; : 내가 설정한 값의 박스 규격을 만들어 준다 (패딩값을 포함한 내가 정한 사이즈로 구성)
content-box; : 컨텐츠의 너비를 유지하면서 박스를 유지해준다. (* 기본 규격 사이즈 는 컨텐츠 박스 *)
		   (패딩값을 제외하고 박스를 만든다, 후에 정한 박스 사이즈 + 패딩값으로 계산해야함)

> 테두리 = border 속성
dashed(점선), dotted(점으로 구성), solid(실선), 
1. border: 8px solid #000; (축약형)
2. border-width: 8px; (정석형)
   border-style: solid;
   border-color: #000;

radius ( 테두리를 둥글게 =반지름 ) >한 박스에 해당하는 모서리를 둥글게 하는 영역이다.
>> 한마디로 해당 박스를 둥글게 하고 싶다면 그 박스의 50%를 기입하면 둥글게 만들 수 있다.

**내가 설정하는 모서리구간만 둥글게 하고 싶다면
border-radius: 20px 40px 60px 80px; <좌측 상단 부터 시계방향으로 설정하면 된다.>

배경속성
border-color: #e7e7e8; (정석형)
        background-image: url("./textSelector/ch_4/BackgroundFront.png"),
          url("./textSelector/ch_4/BackgroundBack.png");
        /* html을 사용하지 않고 css로만 이미지를 가져온 경우 "문자열 취급" */
        /* 복수이미지를 겹쳐 사용할 수 있고 이때는 1번째 태그 뒤에 ,(쉼표)를 사용하여 덧붙인다. */
        /* background-size: 100%;
        /* 해당 이미지가 보다 클/작을 경우 웹 페이지에 맞춰 사용할 수 있는데 size를 규정하면된다. */
        /* 각 각의 이미지에 따라 규정해도 되고 동일한 경우 한번만 규정해도 된다. */
        /* background-position: bottom;
        background-attachment: fixed; */
        /* 해당 이미지를 페이지에 고정시키고자 할때 */
        /* background-repeat: no-repeat; */
        /* 해당 이미지를 반복이 아닌 1개만 원할 경우 */
        /* css로 이미지를 가져올 경우 원본 + 복제품이 생성이 된다 (무조건) */
background: 배경화면을 넣고자 할때 <축약형>
 #e7e7e8 url("./textSelector/ch_4/BackgroundFront.png") bottom/100% no-repeat fixed;
color		img							     position/size   repeat     attachment 이 순서를 고정 약속!

폰트속성
size / weight / family / 
weight : 400(기본속성) +- 될수록 굵어지거나 얇아진다.
family : 서체
흔히 우리가 쓰는 구글 폰트 홈페이지에서 코드를 따와서 링크첨부로 쓸수 있는데
@import url 로 쓰는 걸 추천한다.
그리고 font-family 를 복사해서 적용 해당태그에 적용 시켜줘야 한다.
background: 컬러
color: 글씨색깔
height: 글씨높이
text-align: center; 위치 가운데 정렬
**line-height: 수직정렬처럼 보이길 원한다면 - 그 해당 텍스트의 높이에서 해당 박스크기의 높이 만큼이동을 해준다.
 단, 이 방법은 그렇게 보이기 위한 방법일 뿐!!! 수직정렬은 아니다
font: normal 2rem/400px Arial, Helvetica, sans-serif; (축약형)
    글씨굵기  크기 높이    서체~~


*Responsive 개념
- Flex / Grid

*CSS 애니메이션
- transltion / transform / animation

*SCSS 기본개념








색상
#ff0000(빨간색) // #00ff00(초록색) // #0000ff(파란색) - f는 full을 의미 // 00 00 00 각 색상의 수치
 => Hex코드 (육각형 헥사곤) // 앞과 뒤쪽이 같을경우 숫자 생략 가능
- 색의 삼원색(rgb)을 기준으로 여섯개 색상(더해진 색상) => 가산혼합 : 색을 더하면 더할수록 흰색에 수렴!!
*웹 화면 출력 : 기본 RGB 색상을 기반으로 출력이 된다. 

ex) 흰색 ffffff > 16진수 중 가장 큰 숫자 : "f"로 의미
 > 255 번째가 마지막 숫자  { 0 ~255 }  rgb(255,255,255)
0 ~ 9 == a ~ f
흰색  ff / ff / ff 는 각 f 는 2의 4제곱 한개를 의미 // ff = 2의4제곱+2의4제곱 >2의8제곱 => 256 (최대 출력 수)
> 바이너리 코드 : 0, 1 > bit >> 8개의 bit = 1Byte = 2의8제곱
> 웹 색조합 > 1byte
** 이 때, rgba 가 있는데 a는 투명도를 의미(알파)
(255,0,0,1) 여기서 1이 투명도를 의미한다. 0.5로 한다면 투명도를 반투명하게 설정한것