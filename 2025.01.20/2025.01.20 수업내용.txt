2025.01.20

** 수업내용

1. 자바스크립트 2차수업
- 자바스크립트 문법과 예제들을 계속해서 내가 복습을 해보고 익숙해져야
 활용이 가능하다. 

변수 : 총 3가지
var // let // const

자료형 : 
원시타입 
- 숫자 / 문자열 / 논리형 / Symbol : "데이터 영역" 바로 값 가벼올수 있음!!

참조타입
- 배열 / 객체 / 함수 / Map / Set : "데이터 영역"의 주소값 참조!! > 객체 변수 영역 값을 가져올수 있다.

변수 안에 있는 값을 복제해서 사용했을 때, 사본의 데이터값이 변경 => 원본 데이터 값이
											변경되었는지에 대한 여부 체크!

- 배열 (*lterable 객체)을 학습하게 되면, 참조타입 자료만의 독특한 특징
	`${A}문자 ${B}문자` = 입력 방식법
 
형 변환 :
- typeof (변수명 = 식별자)를 입력하면 해당 변수의 종류를 알수 있게 된다.
- 문자 + 문자 : 문자
- 문자 - 숫자 : 숫자
- toString("1")  // undefined) // String( ) : 문자변환
- Number  //  parselnt  //  parseFloat  : 숫자변환  정수+실수 // 정수만  // 실수(소수점)
- Boolean : 논리형값 변환 참(True) = 1  //  거짓(False) = 0 으로 출력

** 연산자 :
1. 산술연산자
- 사칙연산: = + - / * 
- % => 나머지 값을 구하는 연산자 (* 짝수 && 홀수)
		: 나머지를 구할때에는 몫을 정수까지만 연산을 실행 한 후 나머지값을 도출

2. 증감연산자
- 증감연산자 = ++ // -- (특정한 값을 증감 또는 감소)
- 1. ++a  2.  a++  위치에 따라 연산처리 순서를 다르게 한다. 결과값이 달라진다.

3. 비교연산자: ==(얕은비교) ===(깊은비교) // !=(~과 같지않다.) !==(깊은비교
		 < > // <= >= (초과/미만/이상/이하)

4. 복합대입연산자: += // -= // *= // %=

5. 논리연산자 : !(~이 아니다.) // &&(둘다같을경우)  // || (둘중 하나라도 참 일경우)

6. 연결연산자 : 문자열 + 문자열

7. '삼항'조건연산자 : 1항 > 조건식 // 2항 > 참 // 3항 > 부정
- 2015년 ES6문법 등장 빈도수 증가
 세 개의 피연산자를 받는 유일한 연산자입니다. 앞에서부터 조건문, 물음표(?), 조건문이 참(truthy)일 경우 실행할 표현식, 콜론(:), 조건문이 거짓(falsy)일 경우 실행할 표현식이 배치됩니다.
구문 : condition(<>=) ? exprIfTrue : exprIfFalse;
예제 ) let a = 10,  b = 3;
let result = a > b? console.log("Javascript") : console.log("Typescript");

<-> 제어문 (*반복문 & 조건문) 에 많이 등장 후에 쓸 프로그램에선 ~문을 못쓰기 때문

-- 자바스크립트 코드가 작성 혹은 생성 => 컴퓨터 메모리 공간 객체 생성
=> 실행 컨텍스트(=execution context) 

**전체적인 자바스크립트의 구조 및 개념

execution context : 개발자가 현재 작성 혹은 생성 변수(식별자)가 어떤것이 있는지,
  실행시켜야 하는 함수는 무엇인지 등등의 정보를 저장해놓고 있음 
  어떤 코드를 먼저 실행해야 하는가에 대한 우선순위를 결정하기 위한 목적 */

  // 컴퓨터 > 자바스크립트 어떤 곳에서 어떤 방식으로 실행되는지에 대해 이해!
  // 컴퓨터 공간 > (stack => 쌓다.) // Queue => 대기열
  // 엘리베이터 > 대표적인 스텍구조 stack  <--> Queue 반대구조조
  // 10층으로 올라가기 위해 1층부터 지나치는데 중간중간 사람들이 10층으로 가기위해(목적) +중간 변수 더해짐 차곡차곡 쌓임
  // 또한 엘리베이터 뒤쪽에 있는 사람이 가장 먼저 탄 사람이다.

  /* 또다른 예시 설거지!!
  먼저 퐁퐁질 한 접시가 차곡차곡 쌓임 대신!! 세척할때는 맨 나중 접시 위에 있는거 먼저 헹굼 => stack 구조 입구와 출구가 하나
  Queue 구조는 입구와 출구가 두 군데 이다. 먼저 요청한 사람이 먼저 처리가 되고 그 뒤 순서대로 이어진다.
   => 놀이동산의 구조 대기열에 먼저 선착순으로 기다린 사람부터 태워주듯이 순차적으로 실행이 된다. */

// Snap Shot :  일시정지 사진
// Lexical : 사전적인 = "사전" 답사
//Call Stack : 자바스크립트 명령문을 처리하는 공간 = JS의 구조체계

VariableEnvironment :  환경변수 // 현재 실행 컨텍스트 내 변수명, 함수정보, 실행 컨텍스트
			     내에 특정함수가 호출 혹은 실행되는 순간 해당함수를 스냅샷의 형태로 저장!

LexicalEnvironment : 초기에는 VariableEnvironment와 동일한 값으로 시작하지만, 특정 함수를
			 호출하면 해당함수가 실시간 처리를 하고 있는 상태로 반영해줌!!

>> environmentRecord : 현재 실행하고자 하는 코드 내부에 저장되어있는 정보값을 가지고 있다.

>> outer-EnvironmentReference : 현재 실행하고자 하는 코드들이 외부에 영향을 받고 있는지,
					받고있다면 누구의 영향을 받는지를 확인할 수 있는 정보값을 가지고 있다.

** 호이스팅 (**Hoisting)
= 우물의 개념 > 무언가를 끌어올린다.



ThisBinding : 
현재 변수 || 식별자가 가리켜야 하는 대상 객체가 누구인지에 대한 정보값을 가지고 있다.



***만일 , 내가 코드를 쳐놓고 해당 코드를 사용하지 않아 비 활성화 된 경우 // 주석처리가 된 경우는
***Garbage Collector = GC 에 이동된다. (메모리공간의 효율화를 위해) 과부하 방지
***asynchronously-loaded : 비동기적 처리방식 
우리가 defer을 써서 스크립트를를 만들었는데 그에 따라 코드를 입력해야 하는데
그 방식을 따르지 않고 입력을 해서 오류가 나는 것임
***파일명은 소문자로 입력하는값이 디폴트 값이고 // index는 꼭 있어야 한다.

				
