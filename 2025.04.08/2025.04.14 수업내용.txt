** 수업내용

1. redux 리덕스는 비동기x // 동기방식이다.

외부 API 데이터를 활용해서 페이지를 마운트ㅡ!!

> API 데이터 => 만약 동기방식으로 끌어오려 한다면 리들러를 이용해야한다.(async/await)
Redux Middleware :  리듀서늬 비동기 처리를 지원하기 위해서 탄생된 컨셉

기본적으로 설치해야 할 프로그램
// thunk // saga 란 프로그램이 있는데 => 비동기 처리 방식을 위한 !!
saga 는 자율성이 높지만 공부해야 할게 많고 용량이 많을 때 사용
thunk 는 자율성이 낮지만 공부해야할게 적다 용량이 적을 때 사용

*
npm core
-npm i redux
-nom i react-redux
-npm i redux-thunk


동기 방식의 리듀서를 비동기로 처리하려면

미들웨어 를 이용해서 각각의 리듀서를 독립적인 개체로 만든 뒤 연결을 해주면 된다.
그럼 각각 실행시키기 위한 액션값도 개당 필요하다.

현재 리액트의 원리는
부모가 자식요소로 부터 props 를 전달 할수 있지만 (기능) 형제요소끼린 전달이 안된다.
그래서 계속해서 드릴링을 할수 밖에 없는데(부모->자식->손자....등등)
그렇게 되면 메모리가 효율적이지 못하기 때문에

우리는 redux를 활용하여 하나의 키 코드를 만들어 뿌릴 수 있게끔 하는 것이다.
(하나의 키코드로 형제, 부모)다 활용할 수 있게끔
그래서 그 키코드를 전체의 가상의 박스를 하나 만들어 놓고 그 안에서 활용할 수 있도록 하는것이다.
A 와 B 에 각각 활용할 수 있게 큰박스(외부에 store)안에 넣어두고 main => provider이란 키값 생성!!필수
(redux) 그 안에서 각각의 키코드를 넣기 보단 하나의 키코드를 만들어서 대입만 하는 것임!

이때 사용자가 (UI)브라우저에 담을 려면 액션을 취하는데 그 액션의 지칭이 필요!(마킹=이름)
그때 활용한것이 useDispatch 훅함수를 사용하여 액션개체 생성 후 리듀서에게 연산처리를 하는것이다.
그러고 마지막에 store에 저장이 되는것!

그렇담 반대로 기입한대로 우리가 찾아오려면 useSelecte로 찾아와서 다른 곳에 또 대입을 할수 있다.
*
우리는 각각의 상태관리를 해야 하는데 상관관계가 없는 경우!
굳이 전체로 관리해야 할까? NO

-> 그럼 굳이 하나의 처리를 한뒤 두번째 처리를 해야 할까?(비동기처리) 
-> A와 B 어차피 역할이 다르기 때문에 동기처리 방식으로 각각 연산을 해도 된다.

그럼 여기서 또하나의 문제!!
만약, 영상을 인덱스 페이지에서 틀고 그 밑에 카테고리 페이지가 뜬다면
영상을 거치고 카테고리가 뜰텐데 그럼 연산작업의 순서대로 진행되기 때문에
큰 로딩시간이 걸릴 것이다. 그것이 "리덕스의 맹점"

그래서 우리는 "미들웨어"를 활용함을로써 하나의 캡슐을 만들어 보호하면서
각각 진행될 수 있게끔 (동시에) 그래서 우리는 thunk 와 saga 를 활용하여 페이지를 구성할 것이다.

혼용을 할 수 있게끔(메모리를 효율적으로 쓸수 있게)
-> 동기진행 방식을 유지하다 미들웨어를 거치면 ->  비동기 처리방식으로 바뀔수 있게
유동적으로 변화 할 수 있게끔 그때 하나의 액션키가 변화의 point이다. 

=> 이때, A 와 B 가 각자 독립적인 redux를 거쳐서 비동기화 진행을 위해 생성된 뒤
A와 B 가 한페이지에 생성되어야 하는데 이때, 동시에 구현되기 위하여 전체를 관리해주는 페이지가 필요

** thunk 를 쓸때 액션개체를 다 동시에 쓸 수 없기 때문에 어떠한 함수를 만들어 놓고
 UI에서 어떤 이벤트가 발생이 되면 dispatch 를 활용하여 함수를 반환!

================================================================================

우리가 해볼 예제
넷플릭스 페이지:
- 비동기!
- state // 비동기 // 원할 때 마다 직접 값을 찾아올수 도 있어야함
- react thunk
- axios => 비동기로 관리하는 state값들의 실행순서 등을 결정!
  // 데이터 성공 및 실패에 따른 메뉴얼을 정의! fetch 함수를 썻을때 (then.catch 구문을 썻던 것 처럼)
- 

redux 5버전 부터 확장앱 내장!
-> 그렇기 때문에 다운그레이드 해서 재 설치 해줘야 한다.

npm unintall redux (기존 5버전 삭제)
npm i redux@4.2.1 --force
npm i @redux-devtools/extension --force

1. npm create vite@latest
2. npm i react-router-dom
3. npm i styled-components
4. npm i styled-reset
5. npm i redux @4.2.1
6. npm  i redux-thunk
7. npm i react-redux --force
8. npm i @redux-devtools/extension --force






