2025.01.09

파이어 베이스란?
https://blog.naver.com/iciacokr/222288250896 - 사이트 내용

여러가지 프로그램이 다양하게 있다.

오늘의 수업 주된 내용 --(공간감 파악하기)

<i class=""></i> i태그를 쓴다는 것은 폰트어썸을 차용한다는 것
justify-content: 중심축으로 부터의 수평정렬
align-items: 블록 안에서의 수직정렬

f12 키에서 선택요소를 누르면 해당 어느부분에 행인지 나오게 된다.
비주얼소스코드에서 컨트로 f 누르고 해당요소를 검색해서 찾을 수 있다.

항상 index 파일은 함부로 건드리는게 아니다 원본 파일의 제목은 항상 불변이다.
그 뒤에 복수의 숫자들만 02,03,04 로 가라

우리가 html + css 로만 하기에는 복잡해지고 중첩될수 있는 요소들이 많이 발생할 수 있는데
그렇기 때문에 우리는 자바스크립트를 배워야 하는것이다.

**SSR : Server Side Rendering
- 클라이언트가 요청 할때마다 서버가 요청 받은 페이지를 매번 새롭게 전달해주는 방식
1번의 클릭으로 1번째의 새로운 페이지
2번 클릭으로 2번째의 새로운페이지 >> 계속 갈아끼는 방식이다보니 페이지 넘기는 느낌이 듦
- 이미지 용량 : 저용량 - 그나마 빠름 고용량일수록 로딩시간이 길어진다.

***CSR : Client Side Rendering
- React가 대표적인 라이브러리 방식이다.
- 클라이언트가 어떤 페이지를 요청
 > 해당 메인페이지 + 메인페이지 in 연결되어있는 모든페이지 소스정보를 한번에 Serve가 고객에게 전달
- 다른페이지로 이동할 때, 깜박거림의 불편함이 해소, 페이지 이동시, 매우 빠르게 이동합니다.

1. SPA :
- single page application 
> 1개의 html > 복수의 JS 연결해서 여러개의 페이지를 구현할 수 있도록 만든 앱 설계방식의 페이지 제작
1개의 원본 index 페이지에 2.3.4 js 를 연결해서 보다 효율성있게 사용을 할 수 있다.
- page routing

2. React.js
- 사용자의 입장에서 특정 웹사이트의 메인 페이지를 처음 열어볼때, 만약 메인페이지 안에
고용량의 동영상 혹은 이미지가 들어있다면 => 해당 메인페이지를 로딩해오는데, 굉장히 더디게 출력

- 클라이언트가 최초의 서버에게 받아와야 하는 데이터들이 굉장히 용량이 큰 경우

- TTI : Time To Interval ( FCP )가 출력되는 시간 = 쉽게 말하면 로딩이 오래걸린다.
>클라이언트가 서버에게 페이지를 요청한 이후에 FCP단계까지 도달하는데 걸리는 시간

- FCP(First Contenful Paint)
> 클라이언트가 서버로부터 요청한 데이터를 브라우저에 최초로 출력시킨 상태

==>> TTI 가 오래 걸릴수록(고용량의데이터를 사용해서) FCP 가 비효율적인게 리액트의 단점이다.

3. Next.js
위에 단점들로 인해서 우리 SSR방식으로 "회귀하자" 해서 나온 방식
대신 새로운 요소들이 추가되서 개선된 방식

- Server가 클라이언트의 요청에 따라서 데이터를 전달하는 방식은 예전과 다를바 없음
- Pre-Rendering (*사전렌더링) - 하나의 방식들을 압축해놓고 끌어와서 쓰는 타입이라 효율적인면에서 빠르다
- 서버 || 클라이언트 컴포넌트 방식들의 결합 > 두개의 요소를 적합하게 혼용해서 쓰인다.

넷리파이 우리가 배포하는 방식 중 하나
- 배포하는 방식이 메인이다. 
단점 : 우리가 코딩에 치명적으로 오류가 있거나 할 사소한 오류 일 경우 배포시도 자체가 안된다.

git-hub > 배포하고자 하는 배포전용 repository 생성
> 독립적인 개체로 배포하고자 하는 파일만 있어야지 폴더에 여러가지가 들어있으면 안된다.
예시 ) https://github.com/check-it92/Profile-250109.git


> 본인들의 깃허브 메이크업
- 포트폴리오 홈페이지 > 개별 포트폴리오 작업물 에 대한 소개!!
- read.me 를 통해서 간략한 소개문을 만들어 놓을 수 있다.

로컬 컴퓨터내에 git - init(초기화) 명령어
- 현재 폴더에서 staging area - // 버전관리를 해당 폴더 기준으로 하겠다.
최초의 1회만 하면 된다.
>> 한 폴더 한개씩의 공간 (.git)만 만들어야 하는데 부모와 자식 모두 초기화를 시킬 필요가 없다.

저장하는 순서

git init
햐 https://github.com/check-it92/Profile-250109.git > 내가 저장한 주소값을 origin로 잡겠단 의미
git remote -v 상태 확인해보기
git add . 루트폴더 안에 있는 모든 파일을 옮기겠단 의미
git status 새로운 파일들이 저장 공간에 들어와 있는 상태를 보여준다.
git commit -m "first commit" 어떠한 이름으로 저장할 것인가를 보여주는 것
중간에 수정내용이 생긴다면 후에 2차 3차 커밋을 하면 된다.
git push origin master "마스터"


transition : 전환 속성
> A가 B로 변경되는 순간을 제어할 수 있도록 하는 속성
> 얼만큼 천천히 || 빨리 || 어느 정도의 시간동안 ... || 어느정도의 시간을 기다렸다가 || 어느정도으 가속도로 ||
    어떤 감속으로... 등등의 우리가 부여할 수 있다.

반응의 이전단계에 효과를 부여해줘야 한다. (클릭 이전 // 드래그 이전) 등등

transition-duration - 부여해준 (something)의 시간동안 상태변화를 진행시킬 것인가?
예 ) hp 체력바 , 그래프 진행 될때 
transition-delay : 얼마의 지연 후 상태변화를 진행시킬 것인가?
transition-timing-function : 어떤 감/가 속을 적용시킬 것인가?
transition-property : 어떤 속성요소*(width, height..등등)에 각각의 상태변화를 적용 시킬것인가?

https://cubic-bezier.com/ 해당 사이트에서 그래프 선형 모양으로 변화속도를 알려준다.
1. ease : 기본값 / 점점 속도가 증가하다가 느려짐
2. linear : 똑같은 속도로 끝까지
3. ease-in : 천천히 시작하여 끝날때까지 빨라짐
4. ease-out : 빠르게 시작해서 느려지며 끝
5. ease-in-out : 천천히 시작해서 빨라졌다가 다시 느려짐
6. steps(단계 수, jump-term)
7. step-start : steps(1, start)와 동일
8. step-end : steps(1, end)와 동일
9. cubic-bezier(p1, p2, p3, p4) : 베지어 곡선

https://skydoor2019.tistory.com/6 (사이트 참조)

예시 )  transition-property: background, width;
          transition-duration: 1s, 5s;  >> 이렇게 각각 부여한 것이다.

총 예시 ) &:nth-child(1) {
            transition-property: background, width;
            transition-duration: 1s, 5s;
            transition-delay: 0s;
            transition-timing-function: linear;
          }
***transition  축약형 으로 작성하기
transition: background 1s ease 1s, width 5s ease 1s
		색상      // 진행방향   // 가로   //진행방향

하루하루 한 것 꼭 복습하기










- page routing
