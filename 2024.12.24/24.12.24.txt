24.12.24

**UX를 기반으로 UI를 구현하고, 구현된 UI를 바탕으로 웹앱 서비스를 구축!!

**어떤 서비스를 구축하는데, 왜?? 필요한가? 그럼 무엇이 필요한가? // 구현가능한가?
   구현 하기 위해선 어떻게 하여야 하는가?

**UX란 : User Experience = 사용자 경험 // UI로부터 발생(*이미 만들어져 있는 시스템
	   혹은 상품 혹은 서비스에서 경험 도출)

1. 우리가 어떤 서비스를 만들어보자
	- - 시장에서 무엇을 필요로 하는가? (*문제인식)

2. 목적(*Reason)이 무엇인가?
	- 파편화 되어 있는 정보 수집 : 기사, 기업 데이터, 정부 자료, SNS 등등
	- 실제 실무 : 카드 // 스마트폰 회사에서 나오는 정보들
	- 명확한 지표를 가지고 접근해야 한다.
	- 필드 리서치 : 현업 관계자 혹은 산업 담당자 리서치
	- 데스크 리서치 : 공공데이터 포털, 트랜드랩(네이버), 연관키워드 사이트

3. Target (누구를 상대로 할지) 대상 설정
	- 왜 좋아할까?
	- 광고(목표가 구체화 되어있다.) 어떤이유에서 필요한 것인지?

4. Persona (구체화 되어 있는 인물)
	- 무엇이(somethig)이 필요한 사람들. 어떠한 것을 통해서 최종얻고자 하는것
	- 예시적인 자료들로 추론을 해볼수 있다.

5. 목표 수립 (*Goal) => 서비스 도출

이 전체적인 알고리즘을 통해 UI/UX => 서비스 구현

『예제로 과정 겪어보기

주제 설정 : 소개팅 앱 사용시 ...

- 문제점 : 어떠한 것이 불편한가? (평점/리뷰 파악)
	      상품성과 연관지어서 발전 가능한가? 』

JS > Class = 항상 비슷한 형태의 객체를 생성해야 하는 상황이 연출 될 때,
		  매번 반복할 수 없으므로(비효율적)

Class > 똑같은 형태의 객체 생성해주지만, 프로토 타입의 객체 매개변수를
	  무엇을 주는가에 따라서 저자명, 가격, 페이지, 출간일, 출판사명 등의
	  세부적인 정보만 교체해줄 수가 있음 => 인스턴스(모양 틀) - 이걸 컴포넌츠	 	 (component)라 부른다.

우리가 틀자체를 변형할 수 없듯이 (변형시 그 개념이 틀어지므로)
ex) 붕어빵 틀 제작 -> 앙금은 변경가능( 팥, 슈크림..등등) -> 틀은 변경불가

웹 브라우저 (**Client) 라 부른다.
- 개발자의 코드를 다음과 같은 프로세스로 처리
- 코드를 읽는다. = 파싱(parsing) => 먼저 입력한 순서대로 읽고 내려간다.
  1. html 확장자를 가장 최우선으로 찾아서 Parsing
	- 만일 html 중복파일이 있다면 index란 이름의 확장자 파일이 우선!!(default)
	- (react // next // firebase) 모든 IDE프로그램에서 적용
	- 
- 읽은 코드를 실행시킨다. = 실행(Executing)
- Stack 형식의 구조 (~~을 쌓아서 가는 형식)
- Call Stack
- 병렬적 구조이기 때문에 같은 확장자 파일을 제외하곤
  각자의 확장자 파일들은 거의 동시에 진행이 된다.

보통 실무에서는 스크립트 태그를 문서위에 작성해준다.
읽기 위해선 디퍼방식으로 처리해줘야 한다.
(script defer src="")
<태그 밑에 달아도 돌아는 가나 줄이 길어질 경우 딜레이 되는 오류가 생긴다.>
  ㄴ 하나씩 줄을 읽어 내려가야 해서

		비동기 방식 		vs 		동기 방식

예제)  키오스크 주문 동시에				주문 먼저받고 결제
	커피 제조 						후에 커피제조
	defer 방식						태그 밑에 스크립트 달 경우

효율적인 면에서 차이가 난다. 

** 모듈 방식 (검색해보기)
메인 스크립트 하나를 두고 여러파일을 가지치기 할 수 있다.

css : cascading style sheet
계속 내려받는 포괄적은 포용이 가능한 작업들이다.
사용자의 이벤트 행위에 따른 상호작용(interactive)하는 페이지를 구현하고 싶을때

cascading : 폭포수
style : 스타일
sheet : 시트 (문서)
스스로 계속 써봐야 한다. 코드 짜보고

1. JS  잘 사용
- 눈에 보여지는 UI 디테일 향상x
- JS만 잘해선 취업 어렵다 + UI 디테일 향상 시켜야 한다.

2. 포트폴리오
- Structure
- 목적성이 있어야 하고 = 정체성이 확립되어야 한다.
	ㄴ나라는 지원자가 뭘 잘 할수 있고, 그동안 뭘 해왔고, 주 언어, 경험 등등
	   컨셉과 스토리를 활용하여 멋있게 보여주는 것이 포폴
- 전체적인 흐름과 구성이 맞아야 한다.

트러블 슈팅 : 우리가 코딩에 있어서 에러(*버그)를 잡아줄 수 있는 디버깅 작업을
		 스스로의 힘으로 해결해 본적이 있는가?

Compile 언어 -- ts(타입스크립트) // java 실행되어지는게 어렵지만 안전하다.
- sass => scss 통합 변경
- sassy : 전지현 // 엽기적인 그녀

Interpreter 언어 -- js // 실행되어지는 게 빠르다. / 오류잡기가 어렵다. (에러발생)


디버깅 -- css 프로그램에선 디버깅 잡기가 어렵다.
		그래서 문제 발생시 즉각적으로 알려주는 컴파일 css가 있다.

scss 우리가 설정해놓은 값이 있다.
html에 연결할때 css로 해야 한다, scss로 먼저 파일을 만들어 놓고
css 파일을 만들 필요 없이 하단의 watching상태가 활성화 되어있으므로
초기에 1회 저장시 바로 스타일.css가 만들어진다.
연결은 무조건 같은 확장자 파일로 연결해야 한다. .scss = .scss
		