** 수업내용

1. Class :
- 비슷한 유형의 객체가 반복적으로 생성되어야 하는 경우가 발생되었을때
>> 매번 비효율적으로 코드를 생성해야할까?

- 공통속성을 가지고 있는 하나의 프로토 타입을 만들어놓고 필요할때마다 붕어빵 찍어내듯이
 사용할수 있도록 하기위해서 "Class"를 부여한다.

2. 타입스크립트:
- 클래스 : 만약 생성자 함수를 통해서 선택자 프로퍼티 형식으로 값을 사용하려면,
	     필드 및 생성자함수 내 매개변수 공간에 옵셔널 프로퍼티 name?: 000 => 적용필수

- 클래스 = 하나의 타입으로 활용가능!
- 객체타입 => type // interface / class

타입스크립트 => 자바스크립트의 상위호환 버전 (=> 그걸 슈퍼셋이라 생각하면된다.)

**접근제어자!!
> 클래스를 통해서 생성된 인스턴스 객체 내 속성값을 제어할 수 있는 범위를 설정하고자 만들어진 기능!

-> 3가지 종류 :
> public : 모든 범위 (*클래스 내,외 모두 포함)에서 속성값 접근
-> 디폴트값 = static처럼 기본빵이다.

> private: 클래스 내부에서만 속성값 접근
-> 내부에서만 접근가능 / 외부 불가! / 상속받은 곳에서도 수정 불가!

> protected: 클래스 내부 또는 상속받은 클래스 내부에서만 접근

> 접근제어자를 생성자함수내의 매개변수로 사용한다면, 필드값 생략가능하며, 심지어
  this객체를 활용해서 속성설정 역시 생략 가능!!

> 타입스크립트 클래스 상속은 extends!!
> 객체를 선언할 때, 전문적으로 객체의 타입으로 설정할 수 있도록 도와주는 instance 타입을 활용해서
  클래스를 선언할 수도 있음!
부모 클래스의 속성/메소드를 그대로 사용가능하다.
>> 새로운 클래스의 "상속을

 > "implements" 명령어를 사용하면, 인스턴스로 지정해놓은 타입을 반드시 가지고 있는
  인스튼스객체를 생성할 수 있음
상속의 느낌보다는 interface로 class의 속성이나 메소드에 제약조건을 추가하는 것에 더 가까운 것 같다. interface로 타입을 지정해줄 뿐, 내부 구현을 상속하는 것은 아니기 때문에 속성이나 메소드를 반드시 override해서 써야 한다.(추상 메소드와 비슷한 느낌)
** 오직 타입체크를 위해 사용되는것 내부값을 자동으로 바꾸어주지 않음

-----------------------------------------------------------------------------
** 제네릭타입!!
> Generic : 일반의, 보통의
> 제네릭 타입을 사용해야 하는 이유: 지금까지 학습한 타입별칭, 인터페이스, 원시타입, 클래스등의
 다양한 타입늘 적재적소에 상황에 맞춰서 사용할수 있게 도와줌
> 제네릭 함수, 클래스, 객체 등이 있다.

***컴퓨터 프로그램 방식 에 있어서 작동시키는 원리 2가지

-> 명령형 프로그래밍(WHAT) - 무엇을? for문 처럼(명령 문) 방식으로 결과가 
컴퓨터가 처리해야하는 수행 명령어를 순서대로 써놓은 식이다. 
  - 프로그래밍의 상태와 그 상태를 변경시키는 구문의 관점에서 "연산을 
     설명하는" 프로그래밍 패러다임의 일종이다.
  - "어떻게", "어떤 방식"으로 할 것인지에 중점을 둔다.
  - 거의 대부분의 컴퓨터 하드웨어의 프로그램밍은 명령형으로 구현된다. 
  - 명령형 언어에서는 문(statement)가 가장 작은 독립 요소가 된다.

-> 선언형 프로그래밍(HOW) - 무엇을 위해 어떻게? 하였는가 
-> 더 고차원적인 방식 좀 더 원리에 입각한 방식
 정의 1 : "어떻게"보다는 "무엇"인지에 더 초점을 맞추는 방식 (ex. HTML의 웹페이지에 제목, 글꼴, 본문, 그림 등을 선언하는 것) = 알고리즘은 명시하지않고, 목표를 명시하는 방식 = 해법보다는 문제를 설명하는 방식

