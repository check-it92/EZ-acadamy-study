2025.0205

**>> 코드 몇줄 치는게 의미가 없다. 
우리는 생성형ai와 연관되어 좀 더 효율적으로 가야한다. 뭘 하고 싶은지? 목적이 뚜렷해야 한다.

피그마에서 부터 시안과 그 구현되기 위한 기능이 뭐가 필요한지? 그리고 어떻게 홍보를 해야 할지?
그런 식으로 접근을 해야 한다.
(국한 되지 않고 여러방면으로 접근을 해야한다.)

* 자바스크립트 DOM 구조 (객체문서)
mdn에서 돔 이벤트 요소들을 공부해야 한다. 종류들과 어떻게 작동되는 원리인지

- 돔 트리 구조 : 공부하기
- 스크립트에서는 하나하나의 객체로 인식이 되어진다.
-querySelectorAll() 동일한 형태의 노드객체를 유사배열의 형태로 가져오고자 할때 쓰인다.

예시) console.log(document.querySelectorAll("p")[0]); 인덱스 0번의 객체를 확인하고자 할때

1. innerText 를 쓰는 순서

- const newP = document.createElement("p") 내가 html에 새로 요소를 만들고자 할때
>> 변수를 설정 = docu(내가 생성한 문서). 창조하는 요소("해당태그") 를 이렇게 쓰인다.
-newP.innerText = "TypeScript";
>> 내가 생성한 변수. 글을 쓰겠단 함수. = "해당글"
- document.body.appendChild()
>> 내가 생성한 문서의 . 부모요소 . 자식요소() 설정을 이런식으로 생성할 수 있고 부모요소를 기입!!

2. node 속성 객체를 이용해서 하는 순서

const newP = document.createElement("p");
const textNode = document.createTextNode("TypeScript"); 텍스트 노드로 함수 설정
newP.appendChild(textNode);
변수명.자식요소로(설정한 변수) 입력
document.body.appendChild(newP);

*** 여기서 중요한 왜 nth-of-type 를 썻나??
desc 안에  여러가지 요소들의 태그가 있으므로 그중에서 내가 원하는 태그의
속성값을 선택해서 그 안에 자식요소를 선택하겠다라는 의미로 type 를 쓴것이다.

만일, 안에가 다같은 태그 속성이 었다면 그중에 몇번째 자식요소를 선택하겠단 의미로
nthofChild()를 쓰는게 맞다.
h2 {
                margin: 8px 0 20px;
              }
              p {
                margin: 6px 0;
                &:nth-of-type(2) {
                  line-height: 140%;

if (title.value === "" || author.value === "") alert("정보를 입력해주세요!"); 예외 조항처리라 한다.
 둘중  무엇 하나 만족하지 않으면 안내문이 뜨도록 설정

포지션 앱솔루트와 픽스드의 차이점
: 구글 참조!! 공부하기

앱솔루트(absolute) 
부모 엘리먼트에 구애 받지 않고, 엘리먼트를 자유롭게 배치할 수 있습니다

픽스드(fixed)
브라우저 화면의 상대 위치를 말하며, 스크롤이나 화면이 바뀌어도 고정된 위치를 설정할 수 있습니다 
상위 요소에 영향을 받지 않습니다 
스크롤을 내려도 원하는 위치에 고정되어 있습니다 

공부 방법 여쭤보기 선생님한테 > 내가 공부하고자 하는 방향

애니메이션 효과는 한바퀴를 돌고 원래의 값이 나오는 특성이 있다
그래서 깜박일수 있는데 그럴때 특성을 하나 더 부여해야 한다.

슬릭 슬라이더에는 flex로 주지말고 
구 버전으로 top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); 이렇게 주는게 맞자.

.slick-arrow {
          display: none !important; **
        } 
맞게 입력했지만 라이브러리 코딩이 적용이 안될 때도 있다 
그럴때 강제로 하는 것이 !important 이 커맨드인데 부득이 하게 어쩔수 없을때만 쓰는걸 추천한다.

"target": "ES5" ver = 화살표함수가 나오기 이전이다. 그래서 js 에 기성함수로 작성이 된다.
"target": "ESNext" = 현재 나온 버전중 가장 최신버전을 쓰겠단 얘기이다.

작년 말부터 외부 라이브러리 에서 가져오며 타입에 대한 오류가 생기는데
그걸 위한 옵션으로 "skipLibCheck": true 이렇게 재설정을 하면 해당 타입들을 무시하고
돌아가게 된다.

후에 자바스크립트가 다양해질 것 인데 (풋터, 헤더, 사이드 ..등등) 그때 각각의 파일들을 조립하여
하나의 모듈로써 (레고의 완성본으로) 쓰기 위해 하는 옵션이다.
- 그안에 두가지 버전이 있는데 
 2..ts에서 export 로 보내고 1.ts import 받는다. 이렇게 주고받는다.
1."CommonJS" 최초의 문법 (구버전) : 굉장히 복잡하게 나온다.

2. "ESNext" 최신 문법 :  한결 간결하게 나온다.

"outDir": "dist" - 새로운 폴더를 만들겠다는 뜻이고 보통 "dist" 가 붙어서 구성이 된다.
			바깥에 새로운 폴더가 생성되며 구성안에 js 파일들이 구성이 되어진 폴더가 생성이 된다.

"strict": true - 타입스크립트를 좀더 엄격하게 타입을 맞춰서 관리할것이냐? 아니냐를 불린값으로 결정짓는다.

"moduleDetection": "force" - 여러개의 타입스크립트 안에 동일한 이름의 변수가 있어도 각각 독립적인
					변수로 입력이 되어져서 돌아갈수 있게끔 오류를 방지해준다.