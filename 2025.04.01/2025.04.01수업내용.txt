** 수업내용

*제네릭 함수

*제네릭 타입 별칭
- 타입별칭
- interface
- class 이 3가지 종류가 있지만 보통 위에 2가지를 많이 쓴다.

-- 페치 함수를 쓸수 있는건 (Promise 객체이기 때문에)
 then(), catch() 메서드 함수를 쓸수 있다.
--------------------------------------------------------------------------

타입스크립트의 부수적인 기능들

indexed access 타입* 

keyof 연산자 + typeof 연산자 같이 적용해서 쓸수 있다.

Mapped 타입

Template Liteal 타입

조건부 타입
- 분산적 조건부 타입 (삼항 방정식)

- Exclude 조건부타입

* 유틸리티 타입
- Readonly
- Partial
- Required
- Pick
- Omit
- Exclude

타입스크립트의 모든 타입을 다사용하긴 어려우나 
> 주로 사용하는 타입이 따로 기능을 구현하다보면 있을 것이다
> 원시타입 // 함수타입 // 객체타입 // 제네릭타입
> 타입가트 // 타입단언 // 인덱스드 엑세스 // 호출시그니처 등등



🔍 extends의 의미와 기능
extends는 타입이 다른 타입의 서브타입(하위 타입)인지 검사하는 역할을 합니다.

typescript
복사
편집
A extends B
A가 B의 서브타입이라면 true

그렇지 않다면 false

이러한 extends 연산자는 조건부 타입(Conditional Types) 안에서 주로 사용됩니다.

typescript
복사
편집
type Result = A extends B ? TrueType : FalseType;
A가 B의 서브타입이면 TrueType을 반환

그렇지 않으면 FalseType을 반환

📌 extends의 기능: 서브타입 관계 검사
✅ 예제 1: 기본적인 타입 비교
typescript
복사
편집
type A = number;
type B = number | string;

type Result = A extends B ? "Yes" : "No"; // "Yes"
A = number

B = number | string (즉, B는 number를 포함하고 있음)

number는 number | string의 부분 집합(서브타입) 이므로 "Yes"가 반환됨.

✅ 예제 2: 객체 타입 비교
typescript
복사
편집
type ObjA = { a: number };
type ObjB = { a: number; b: number };

type Result = ObjA extends ObjB ? "Yes" : "No"; // "No"
왜 No가 반환될까?
ObjA는 { a: number }만 가지고 있음.

ObjB는 { a: number; b: number }을 가지고 있음.

ObjA는 ObjB가 요구하는 b 속성이 없음 → ObjA는 ObjB의 서브타입이 아님 ❌

따라서 extends 결과는 false, 즉 "No"이 반환됨.

✅ 예제 3: 반대 경우 (슈퍼타입이 서브타입을 포함하는 경우)
typescript
복사
편집
type ObjA = { a: number };
type ObjB = { a: number; b: number };

type Result = ObjB extends ObjA ? "Yes" : "No"; // "Yes"
ObjB는 { a: number; b: number }

ObjA는 { a: number }

ObjB는 ObjA가 요구하는 a: number 속성을 포함하고 있음.

즉, ObjB는 ObjA를 확장(extends)한 타입이므로 true가 반환됨.

🔥 정리: extends의 의미
extends는 서브타입 관계를 검사하는 역할을 함.

A extends B의 의미는 "A가 B의 서브타입인가?" 를 묻는 것.

서브타입이면 true, 아니면 false.

객체 타입에서는 필수 속성을 모두 포함해야 서브타입이 될 수 있음.

✅ 쉽게 기억하기:

"작은 타입이 큰 타입을 포함해야 서브타입"

"부족한 속성이 있으면 서브타입이 아님"

[--------------------------------------------------------------------------]

* 자바스크립트 기반, 리액트에서도 동일하게 규현가능한 기능!!
-- 타입스크립트 기바느 리액트 구현 =>  특정 걸러 테마값을 설정해놓고, 해당 테미값을 가져다가
 사용하는 방법을 배워로려 함

1)  작업하는 환경이 타입스크립트!!
> 객체, 함수, 배열 => 타입기반
> 2) 테마컬러를 정의하려고 함
> 테마컬르의 자료형태 => 객체이다.

3) 스타일 컴퍼넌트는 개발지인 내가 어떤 타입의 테마 컬러를 정의하려고 하는지 알수 없음
4) styled.d.ts => 타입정의 (먼저)
> 내가 만들고자 하는 테마 컬러의 타입을 정의하는 공간!!

5) 위에서 정의한 타입을 적용 & 실제 사용할 컬러 정의!!
> THEME.TS

6) 전역에서 위에서 정의한 테마 컬러를 사용할수 있게 하기 위해서
ThemeProvider // Theme

