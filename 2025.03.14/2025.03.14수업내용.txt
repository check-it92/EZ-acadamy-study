** 2025.03.14 금요일

** : 수업내용

-- 자바스크립트를 쓸 때 대표적인 3가지 문제 :
 
1.매번 자바스크립트를 불러 올때마다의 번거로움과 다수의 시간 지연
2.그리고 호출 될때마다의 컴포넌트 위계질서 => 의존성 고민
3.모듈간의 상호 호환의 문제

웹사이트를 구성할때 .js .css .images 파일 등 수 많은 들이 모여 웹사이트를 구성하게 된다. 
따라서 웹사이트에 접속했을때 굉장히 많은 파일이 다운로드될 수 있는데 
이것에 비례하여 서버의 자원을 소모하고 웹사이트가 느리게 로딩이 된다.

또한, 많은 자바스크립트 패키지등을 사용하다보면 각각의 서로 다른 패키지들이 
서로 같은 이름이나 함수를 사용하게 되면서 애플리케이션이 깨지게 되는데, 
이러한 현상을 해결하기 위해 나온 개념이 묶는다는 개념의 번들러가 등장하였다.

=> 1, 2번 문제를 해결하기 위해 2가지를 번들(묶음)로 결합하여 번들러란 프로그램을 이용한다.
💡 모듈 번들러란?
웹 애플리케이션을 구성하는 자원(HTML, CSS, Javscript, Images 등)을 
모두 각각의 모듈로 보고 이를 조합해서 병합된 하나의 결과물을 만드는 도구를 의미한다.
** 대표적인 번들러 = https://webpack.kr/ 웹팩

3번 문제 서로 다른 js 버전을 모듈을 상호 호환하기 위해 있는 컴파일러!!
소스 대 소스 컴파일러(transpiler) 라고 부른다.
필요성은 본론부터 말하자면 크로스 브라우징(cross browsing) 때문이다.
하위 브라우저와의 호환성과 효율성을 높히기 위함이다
=> https://babeljs.io/ 바벨이다.

=> 이 2가지 프로그램이 나온지 오래된 제품 들이다.

인터프리터와 컴파일러에 대한 의미를 알아야 한다.
둘다 기계어를 번역 해주는 기능이지만, 차이점은 있다.

컴파일러(compiler)

전체 파일을 스캔하여 한꺼번에 번역한다.
초기 스캔시간이 오래 걸리지만, 한번 실행 파일이 만들어지고 나면 빠르다.
기계어 번역과정에서 더 많은 메모리를 사용한다.
전체 코드를 스캔하는 과정에서 모든 오류를 한꺼번에 출력해주기 때문에 실행 전에 오류를 알 수 있다.
대표적인 언어로 C, C++, JAVA 등이 있다.

인터프리터(interpreter)

프로그램 실행시 한 번에 한 문장씩 번역한다.
한번에 한문장씩 번역후 실행 시키기 때문에 실행 시간이 느리다.
컴파일러와 같은 오브젝트 코드 생성과정이 없기 때문에 메모리 효율이 좋다.
프로그램을 실행시키고 나서 오류를 발견하면 바로 실행을 중지 시킨다. 실행 후에 오류를 알 수 있다.
대표적인 언어로 Python, Ruby, Javascript 등이 있다

** Vite 

Vite란?
빠르고 간결한 모던 웹 프로젝트 개발 경험에 초점을 맞춰 탄생한 빌드 도구이며, 
두 가지 컨셉을 중심으로 하고 있습니다.
초기세팅이 무척 빠르다. CRA(크리에이티브 리액팅 어플) 에선 사용하지 않는 것까지
노드 모듈안에 죄다 깔리는 반면 vite는 

첫 번째, 개발 시 네이티브 ES Module을 넘어 더욱 다양한 기능을 제공합니다. 
가령, Hot Module Replacement(HMR)

두 번째, 번들링 시, Rollup 기반의 다양한 빌드 커맨드를 사용하여 높은 수준으로
 최적화된 정적(Static) 리소스들을 배포할 수 있게끔 하며, 
미리 정의된 설정(Pre-configured)을 제공합니다.
vanilla, reat, vue 등에서 사용 가능

Dependencies: Vite의 사전 번들링 기능은 Esbuild를 사용하고 있습니다. 
Go라는 네이티브 언어로 작성된 Esbuild는 
Webpack, Parcel과 같은 기존의 번들러 대비 10-100배 빠른 속도를 제공합니다.
Source code: Vite는 Native ESM을 이용해 소스 코드를 변환 및 제공합니다. 
조건부 동적 import 이후의 코드는 현재 화면에서 실제로 사용되는 경우에만 처리됩니다.

1. React Vite란?

Vite는 빠르고 가벼운 프론트엔드 빌드 도구로, 빠른 개발 환경과 최적화된 번들링을 제공합니다. React 프로젝트에서 Vite를 사용하면, 애플리케이션을 빠르게 실행하고 빌드할 수 있으며, HMR(Hot Module Replacement) 기능을 통해 개발 중에 코드 변경 사항이 즉시 반영됩니다.

Vite의 주요 특징:

• 빠른 개발 서버: Vite는 모듈을 ESM(ECMAScript Modules) 형식으로 제공하며, 
필요한 모듈만 즉시 로드하여 매우 빠른 개발 환경을 제공합니다.
• Hot Module Replacement (HMR): 코드 변경 사항을 
즉시 반영하여 브라우저 새로고침 없이도 UI를 업데이트할 수 있습니다.
• 빠른 번들링: Vite는 Esbuild를 사용해 번들링 속도를 크게 향상시켰습니다.

 

2. Vite를 사용하는 이유

Vite는 기존의 **Create React App (CRA)**에 비해 더 빠르고 가벼운 개발 환경을 제공하기 때문에 많은 개발자들이 Vite로 전환하고 있습니다. 특히 대규모 프로젝트에서 Vite는 첫 번째 빌드와 재빌드 속도가 크게 향상됩니다.

Vite를 사용하는 이유:

1. 빠른 초기 빌드: Vite는 개발 서버를 시작할 때 전체 애플리케이션을 번들링하지 않고, 필요한 모듈만 번들링하므로 매우 빠르게 시작할 수 있습니다.
2. 빠른 HMR: 변경된 모듈만 다시 로드하여 페이지를 새로고침하지 않고도 즉시 변경 사항을 반영합니다.
3. 최적화된 빌드 성능: Vite는 Esbuild로 번들링하여 대규모 애플리케이션에서도 빌드 속도가 매우 빠릅니다.

3. Create React App (CRA)란?

**Create React App (CRA)**는 React 프로젝트를 쉽게 시작할 수 있도록 해주는 CLI 도구입니다. Webpack을 사용하여 번들링하고, 바벨로 최신 자바스크립트를 변환하는 설정을 포함하여, 복잡한 빌드 설정 없이 바로 React 프로젝트를 시작할 수 있게 도와줍니다.

(CLI는 Command Line Interface의 약자로, 명령어 기반 인터페이스를 의미합니다. 사용자가 명령어를 입력하는 방식으로 프로그램을 실행하고 제어할 수 있는 인터페이스입니다. GUI(그래픽 사용자 인터페이스)와 달리 텍스트 명령어로 프로그램을 조작합니다.)

CRA의 주요 특징:

• Webpack 기반: CRA는 내부적으로 Webpack을 사용해 애플리케이션을 번들링하고, 바벨을 통해 최신 자바스크립트 문법을 변환합니다.
• 기본 설정 제공: 초기 설정이 모두 포함되어 있어 복잡한 빌드 설정을 할 필요가 없습니다.
• React 개발 환경 제공: 기본적인 React 개발 환경과 빌드 도구를 포함하고 있어, 
별도의 설정 없이 React 앱을 바로 시작할 수 있습니다.

4. 왜 Vite로 전환하는가?

CRA는 초기 프로젝트 설정과 빌드를 쉽게 할 수 있는 장점이 있지만, 
프로젝트가 커지거나 요구 사항이 복잡해지면 속도와 번들링 최적화 측면에서 한계가 있습니다.

CRA의 한계:

• 느린 빌드 속도: CRA는 초기 빌드와 재빌드 시 Webpack을 사용하므로, 
프로젝트가 커질수록 빌드 시간이 길어집니다.
• 느린 HMR: Hot Module Replacement가 느리고, 개발 중 변경 사항을 적용하는 데 
시간이 걸릴 수 있습니다.
• 대규모 애플리케이션에서 성능 저하: 대규모 프로젝트에서 Webpack의 빌드 시간이 매우 길어져서 개발 생산성이 떨어질 수 있습니다.

Vite의 개선점:

• 더 빠른 개발 환경: Vite는 ESM을 사용하여 초기 빌드 시간과 재빌드 속도가 CRA에 비해 훨씬 빠릅니다.
• 최적화된 번들링: Esbuild를 사용해 빠른 번들링 속도를 제공합니다.
• 유연한 설정: Vite는 커스터마이징이 쉽고, 다양한 플러그인 시스템을 제공합니다.

결론:

• CRA는 초기 React 프로젝트를 시작하기에 편리한 도구지만, 
프로젝트가 커지면 빌드 속도가 느려질 수 있습니다.
• Vite는 빠른 개발 서버와 번들링 성능 덕분에, 특히 대규모 프로젝트에서 더욱 효율적입니다.

단점은, 버그들도 상당히 많다.
그렇기 때문에 리액트 와 vite를 비교해놓은 설명이 있다.
*사이트 참조 :
https://velog.io/@jaewoneee/%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%B3%B4%EC%9D%BC%EB%9F%AC%ED%94%8C%EB%A0%88%EC%9D%B4%ED%8A%B8-Create-React-App-vs-Vite

vite 를 사용할때의 커맨드
초기 커맨드에 npm create vite@latest 입력 후
그 후 (y) 선택 그 다음  프로젝트 폴더명 입력
후 에 세부사항들을 선택 하면 끝

그리고 프로그램에서 해당 폴더로 이동 후에
npm i (노드모듈)
npm run dev
npm i sass 등 모듈들을 깔면 된다.
그리고 확장자들을 scss 로 변경하면 기초세팅 끝

*** 팀과제 할때 팀원들 전체 통일을 해야 한다.
CRA 로 할지 vite 로 할지 테일윈드로 할지 scss 로 할지 선택해서 사용

todo 리스트
- CRUD : Create, Read, Update, Delete 기능

props drilling => 계속해서 지금 툴킷을 쓰지 않을시에 콜백지옥처럼 맞물리는 상황이 온다.

--------------------------------------------------------------------------------

**상태관리용 

useReducer()

1. useReducer()는 useState()와 같은 상태 관리, 상태 업데이트 훅(Hook)이다.
2. 변경할 값이 많을 때(상태 업데이트) 즉 상태 관리할 데이터가 많아질 때 사용을 고민해 볼 필요가 있다.
3. 좀 더 구조화된 방식으로 상태를 관리하고 싶을 때 사용할 수 있다. ( 예) "PLUS" 타입 은 무조건 더하기)
4. 선언형태 : const [state, dispatch] = useReducer(reducer, initialState); 

>> 특정 state 값을 필요로 하는 컴포넌트에 직접 값을 전달해줄수 있음!!
>> state의 관리를 컴포넌트 바깥에서 할 수 있음!!
 

state : 상태 이름 (컴포넌트에서 사용할 상태) > 빵(재료) 담는 접시
dispatch : 상태(state)를 변경 시 필요한 정보를 전달하는 '함수' > 주문서
reducer : dispatch를 확인해서 state를 변경해 주는 '함수' > 주방(공장)
initialState : state에 전달할 초기 값 > 빵(및 재료 등) 개수 설정
출처: https://ccomccomhan.tistory.com/281 [[꼼꼼한 개발자] 꼼코더:티스토리]


