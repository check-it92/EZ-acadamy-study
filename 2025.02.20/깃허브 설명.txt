** 깃허브 설명

1. pm :

로컬 컴퓨터에 팀 프로젝트에 기준이 될 폴더 및 파일 생성 > 커밋 & 푸쉬

2. 팀프로젝트용 레포지토리 필요

3. 로컬 컴퓨터에 스테이징 에어리어가 존재 해야함 (staging area)
(*git init)
 
-  (staging area) + 레포지토리의 연결
(*git remote add origin 외부 레포지토리 주소)

++ 연결되었는지 확인 하는 법 git remote -v (항상 확인이 필수)

- staging area에 데이터 담는 명령어
*git add . (여기서 온점의 의미는 루트폴더의 모든 데이터를 의미)

*여기서 특정 파일 & 폴더만 넣고 싶다면 *git add (특정 파일 & 폴더명) 으로 입력

- git status : 현재 내 스테이징 에어리어의 상태를 알려줌

- git rm --cached (index.html) : 내가 잘못올렸을때 다시 되돌리는 기능

> commit convention ("커밋 메시지 어떻게 어떤 패턴, 방식으로 작명하는가?")

방식 : 규정한 방법대로 약속해서 사용 - 지점을 설정함으로써 찾기 수월

(1) 유다시티 커밋 컨벤션 : 01 jaeki #main (예시) 
- header body footer
- First: 커밋 횟수 커밋한 사용자명 : jaeki 수정한 부분: #main

(2) 깃 이모지 : 5개정도의 팀내 협의된 이모지를 가지고 활용 (1단계 ~ 5단계)

- git commit -m"커밋메시지 명" : 저장하기위한 이름

현재까지의 commit 내역을 확인해보려면??
*git log //

또는 돌아가고 싶다면 **git reset HEAD^ : 가장 최근 commit 을 삭제 시킴 
>> 그리고 다시 수정 하고 add . 한 뒤 새로운 커밋

- git push origin master : 외부 레퍼지토리로 송출

-------------------------------------------------------------------------------------------------------

팀원 : PM이 푸쉬한 데이터를 그대로 받아서 작업을 해야 나중에 동일한 히스토리를 기반으로
	병합 & 분리를 하던, 편집을 하던 할 수 있음

최초 1회
**git clone (공통의 외부 레퍼지토리 주소)
: 그럼 최초의 히스토리와  .git 가 생성된 해당 폴더가 생긴다.
- 그 폴더 안에서 작업을 해야한다.

후에 해당 클론해온 파일로 이동해야 한다. cd team-test

>>>>>> 실제 문서 작업 후

- git restore --staged(해당 파일명) : 그 이전단계로 돌리는 취소하는 커맨드

Branch : 깃 허브내 하나의 레퍼지토리에서 관리할 수 있는 일종의 개별적인 폴더
- 
git push origin master : 만약 팀원이 여기다 미는 순간 덮어씌워져서 순간 작살난다.
***그래서 개별 브런치를 만들어야 한다.

그래서 팀원 별로 개인 브랜치를 생성 한후 그 곳에 데이터를 푸쉬해야 한다.

- git checkout -b "브랜치 생성명" : 최초의 생성 시 하는 커맨드

만일 그 이전 브랜치로 이동하기 위해선

- git checkout (브랜치명) : 입력시 그 해당 브랜치로 이동
***치트키 : 브랜치명이 "-" 를 붙여서 입력하면 그 이전단계로 바로 이동함

git branch : 해당 브랜치 리스트들을 보여줌

git revert : 해당 원하는 부분의 커밋 구역을 끌어오겠다 라는 뜻
** 그럴려면 해당 아이디값을 알아야 한다.

"git log" 를 하면 이런식으로 기록이 나온다.

commit 5e150c7245330c3e6c8776a669d5994e44b70acd (HEAD -> team01)
Author: check-it92 <worl5214@naver.com>
Date:   Thu Feb 20 11:38:01 2025 +0900 >> 해당 시간

    team 01 commit

commit 01"d25ac957ff0f36c9041e647004875a0bd1fbf8" >> 해당 id 값
Author: check-it92 <worl5214@naver.com>
Date:   Thu Feb 20 10:58:51 2025 +0900

    02 jaeki #main

commit 1e98b284ce7a0bc448e1eaaaebe405c3323a37d3
Author: check-it92 <worl5214@naver.com>
Date:   Thu Feb 20 10:52:02 2025 +0900

-------------------------------------------------------------------------------------

그럼 팀장이 "마스터 브랜치를 생성" - 클라이언트/최종배포할 완벽보완 브랜치
그리고 프로젝트를 진행할 개별소통 및 수정 보완을 위한 "디벨롭 브랜치" 생성

++ 이 사이에 케바케 이지만 배포용(test)으로 만든 "hotfix" 브랜치도 생성하는 곳도 있다.
**로컬상에선 문제가 없지만 배포했을때 생기는 버그들을 확인하기 위한 

이제 각자의 팀원이 프로젝트를 진행하려면 디벨롭을 다운받고
그 메인에서 각각 파생된 team01,  team02,  team03 ... 이렇게 될것이다.
** 각각 파생된 브랜치들을 feature 브랜치라 한다.(고유명사)

PM 입장에서 최초에 메인브런치를 만들때 같이 디벨롭 브런치 까지 생성해주는게 좋다.

- pull request : 상대가 보낸 or 팀장이 보낸 개발자가 pull 해달라고 요청하는 단계

나의 team01에서 작업하고 올릴경우 develop 에서 작업 환경이 달라졌으면
만일 머지단계에서 오류가 날 경우
- git pull origin develop --no-rebase : 이 커맨드로 어느 부분이 달라졌는지 확인해보기
						 원본 vs 지금 작업화면에서 달라진거 확인
						 ** 병합 편집기에서 확인

** 병합 편집기에서 : 수신 수락 | 조합 사용 | 무시 
선택사항중 : 무시는 걍내꺼만 살리는거 절대no //

만일 실수로 메인에 바로 병합을 요청 했을시 !!
그런 팀원의 실수를 방지 할 수 있게 막아주는 것
settings 에서 branch 카테고리 선택 
Branch protection rules durltj - classic branch rules 에서 선택 후
체크박스란 선택하기 머징전 리퀘스트해라 그 부분 선택후 create


-------------------------------------------------------------------------------------

gui - 방식으로 만들기
원본 레포지토리 만들기 (깃 초기화 및 퍼스트 커밋) 완료
깃허브 홈페이지에서 상단 세팅을 클릭 콜라보레이트 에서 사람들 초대하기



